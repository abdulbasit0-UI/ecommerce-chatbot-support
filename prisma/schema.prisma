// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Onboarding and business info
  isOnboarded   Boolean @default(false)
  businessName  String?
  website       String?
  productCount  String? // "1-10", "11-50", "51-100", "100+"
  referralSource String? // "Google", "Social Media", "Friend", "Other"

  accounts Account[]
  sessions Session[]
  chatbots Chatbot[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Chatbot {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  name        String   // Site label/name
  primaryColor String  @default("#8B4513") // Light brown default
  welcomeMessage String @default("Hello! How can I help you today?")
  isActive    Boolean  @default(true)
  embedCode   String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversations ChatConversation[]
}

model ChatConversation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  chatbotId String   @db.ObjectId
  sessionId String   // Unique session for each visitor
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chatbot  Chatbot     @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  messages ChatMessage[]
}

model ChatMessage {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String   @db.ObjectId
  content        String
  isFromUser     Boolean  // true if from user, false if from AI
  timestamp      DateTime @default(now())

  conversation ChatConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}
